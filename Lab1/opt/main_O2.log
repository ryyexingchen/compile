*** IR Dump Before Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main_O2.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main_O2.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

; Exit blocks
26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
*** IR Dump After Loop Strength Reduction ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

; Exit blocks
26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Rewrite Symbols ***
; ModuleID = 'main_O2.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'main_O2.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12

26:                                               ; preds = %12
  %27 = load i32, i32* %1, align 4
  ret i32 %27
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  %10:gr32 = COPY $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  %6:gr32 = COPY $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %2:gr32 = COPY $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
624B	  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
640B	  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
656B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
672B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  %22:gr64 = MOV64ri @.str.1
720B	  $rdi = COPY %22:gr64
736B	  $esi = COPY %25:gr32
752B	  $al = MOV8ri 0
768B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
784B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  %24:gr32 = COPY $eax
816B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
832B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
848B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
864B	  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
880B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
896B	  JMP_1 %bb.1

912B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

928B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
944B	  $eax = COPY %15:gr32
960B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  %10:gr32 = COPY $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  %6:gr32 = COPY $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %2:gr32 = COPY $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
624B	  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
640B	  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
656B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
672B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  %22:gr64 = MOV64ri @.str.1
720B	  $rdi = COPY %22:gr64
736B	  $esi = COPY %25:gr32
752B	  $al = MOV8ri 0
768B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
784B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  %24:gr32 = COPY $eax
816B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
832B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
848B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
864B	  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
880B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
896B	  JMP_1 %bb.1

912B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

928B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
944B	  $eax = COPY %15:gr32
960B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY %22:gr64
  $esi = COPY %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY %15:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY killed %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY killed %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY killed %15:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY killed %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY killed %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY killed %15:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY killed %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY killed %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY killed %15:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY killed %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY killed %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = ADD32rm killed %30:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = ADD32ri8 killed %19:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY killed %15:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY killed %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY killed %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = COPY killed %30:gr32
  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = COPY killed %19:gr32
  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY killed %15:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %8:gr64 = MOV64ri @.str
  $rdi = COPY killed %8:gr64
  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $rsi = COPY killed %9:gr64
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %29:gr32 = COPY killed %30:gr32
  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %22:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %25:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  %18:gr32 = COPY killed %19:gr32
  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  $eax = COPY killed %15:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY killed %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY killed %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY killed %4:gr64
288B	  $esi = COPY killed %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY killed %0:gr64
432B	  $esi = COPY killed %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
624B	  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
640B	  %29:gr32 = COPY killed %30:gr32
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY killed %22:gr64
752B	  $esi = COPY killed %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
864B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
880B	  %18:gr32 = COPY killed %19:gr32
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY killed %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY killed %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY killed %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY killed %4:gr64
288B	  $esi = COPY killed %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY killed %0:gr64
432B	  $esi = COPY killed %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm killed %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store 4 into %ir.5)
624B	  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
640B	  %29:gr32 = COPY killed %30:gr32
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY killed %22:gr64
752B	  $esi = COPY killed %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.2)
864B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
880B	  %18:gr32 = COPY killed %19:gr32
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY killed %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
640B	  %29:gr32 = COPY %30:gr32
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
880B	  %18:gr32 = COPY %19:gr32
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %30:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
640B	  %29:gr32 = COPY %30:gr32
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
880B	  %18:gr32 = COPY %19:gr32
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY killed $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY killed $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY killed $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY killed $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  %8:gr64 = MOV64ri @.str
112B	  $rdi = COPY %8:gr64
128B	  %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
144B	  $rsi = COPY %9:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %10:gr32 = COPY $eax
224B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = MOV64ri @.str.1
272B	  $rdi = COPY %4:gr64
288B	  $esi = COPY %7:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %6:gr32 = COPY $eax
368B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %0:gr64 = MOV64ri @.str.1
416B	  $rdi = COPY %0:gr64
432B	  $esi = COPY %3:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %2:gr32 = COPY $eax

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm %13:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  %32:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.5)
624B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  %29:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.3)
688B	  %25:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  %22:gr64 = MOV64ri @.str.1
736B	  $rdi = COPY %22:gr64
752B	  $esi = COPY %25:gr32
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  dead %24:gr32 = COPY $eax
832B	  %21:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.2)
864B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  %18:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
976B	  $eax = COPY %15:gr32
992B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  renamable $rdi = MOV64ri @.str
128B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  renamable $rdi = MOV64ri @.str.1
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  renamable $rdi = MOV64ri @.str.1
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
624B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
688B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  renamable $rdi = MOV64ri @.str.1
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
864B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
992B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  renamable $rdi = MOV64ri @.str
128B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  renamable $rdi = MOV64ri @.str.1
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  renamable $rdi = MOV64ri @.str.1
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
624B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
688B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  renamable $rdi = MOV64ri @.str.1
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
864B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
992B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  renamable $rdi = MOV64ri @.str
128B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  renamable $rdi = MOV64ri @.str.1
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  renamable $rdi = MOV64ri @.str.1
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
624B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
688B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  renamable $rdi = MOV64ri @.str.1
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
864B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
992B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  renamable $rdi = MOV64ri @.str
128B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  renamable $rdi = MOV64ri @.str.1
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  renamable $rdi = MOV64ri @.str.1
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
544B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
560B	  JCC_1 %bb.3, 13, implicit killed $eflags

576B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1

592B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
608B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
624B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
656B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
672B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
688B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  renamable $rdi = MOV64ri @.str.1
768B	  $al = MOV8ri 0
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
848B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
864B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
896B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
912B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
928B	  JMP_1 %bb.1

944B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
992B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.1)
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load 4 from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load 4 from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

