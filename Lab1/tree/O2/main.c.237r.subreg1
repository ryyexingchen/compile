
;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23) (executed once)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 4 2 (set (reg/f:DI 89)
        (const_int 40 [0x28])) "main.c":5:1 66 {*movdi_internal}
     (nil))
(insn 4 3 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.2544+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (reg/f:DI 89) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "main.c":5:1 976 {stack_protect_set_di}
     (nil))
(insn 10 4 11 2 (parallel [
            (set (reg:DI 90)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":11:4 191 {*adddi_1}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg:DI 90)) "main.c":11:4 66 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb791bda510 *.LC0>)) "main.c":11:4 66 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "main.c":11:4 69 {*movqi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fb791acc600 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "main.c":11:4 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fb791acc600 scanf>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 67 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb791bda5a0 *.LC1>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 66 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 67 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 69 {*movqi_internal}
     (nil))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fb791af5300 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fb791af5300 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 20 19 21 2 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 67 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb791bda5a0 *.LC1>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 66 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 67 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 69 {*movqi_internal}
     (nil))
(call_insn 24 23 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fb791af5300 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fb791af5300 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 27 24 28 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
            (const_int 1 [0x1]))) "main.c":15:9 11 {*cmpsi_1}
     (nil))
(jump_insn 28 27 57 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "main.c":15:9 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 42)
(note 57 28 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 57 6 3 (set (reg/v:SI 85 [ i ])
        (const_int 1 [0x1])) "main.c":10:6 67 {*movsi_internal}
     (nil))
(insn 6 5 7 3 (set (reg/v:SI 84 [ b ])
        (const_int 1 [0x1])) "main.c":9:6 67 {*movsi_internal}
     (nil))
(insn 7 6 39 3 (set (reg/v:SI 87 [ a ])
        (const_int 0 [0])) "main.c":8:6 67 {*movsi_internal}
     (nil))
(code_label 39 7 29 4 3 (nil) [1 uses])
(note 29 39 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/v:SI 83 [ b ])
        (reg/v:SI 84 [ b ])) 67 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (parallel [
            (set (reg/v:SI 84 [ b ])
                (plus:SI (reg/v:SI 84 [ b ])
                    (reg/v:SI 87 [ a ])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":18:9 190 {*addsi_1}
     (nil))
(insn 32 31 33 4 (set (reg:SI 1 dx)
        (reg/v:SI 84 [ b ])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 67 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb791bda5a0 *.LC1>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 66 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 67 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 69 {*movqi_internal}
     (nil))
(call_insn 36 35 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fb791af5300 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":107:10 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fb791af5300 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 37 36 38 4 (parallel [
            (set (reg/v:SI 85 [ i ])
                (plus:SI (reg/v:SI 85 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":21:9 190 {*addsi_1}
     (nil))
(insn 38 37 40 4 (set (reg/v:SI 87 [ a ])
        (reg/v:SI 83 [ b ])) 67 {*movsi_internal}
     (nil))
(insn 40 38 41 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
            (reg/v:SI 85 [ i ]))) "main.c":15:9 11 {*cmpsi_1}
     (nil))
(jump_insn 41 40 42 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "main.c":15:9 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 39)
(code_label 42 41 43 5 2 (nil) [1 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 48 5 (set (reg:SI 88 [ <retval> ])
        (const_int 0 [0])) "<built-in>":0:0 67 {*movsi_internal}
     (nil))
(insn 48 44 49 5 (set (reg/f:DI 92)
        (const_int 40 [0x28])) "main.c":23:1 66 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.2544+0 S8 A64])
                        (mem/v/f:DI (reg/f:DI 92) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "main.c":23:1 978 {stack_protect_test_di}
     (nil))
(jump_insn 50 49 58 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "main.c":23:1 659 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 53)
(note 58 50 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 51 58 53 6 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb791bd9400 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "main.c":23:1 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb791bd9400 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(code_label 53 51 59 7 4 (nil) [1 uses])
(note 59 53 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 59 55 7 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "main.c":23:1 67 {*movsi_internal}
     (nil))
(insn 55 54 0 7 (use (reg/i:SI 0 ax)) "main.c":23:1 -1
     (nil))
