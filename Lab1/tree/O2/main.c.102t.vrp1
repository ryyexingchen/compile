
;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_14 -> { i_4 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 2 ( 33%)



Value ranges after VRP:

n.0_1: VARYING
a_2: int [0, +INF]
b_3: int [1, +INF]
i_4: int [1, +INF]
.MEM_5: VARYING
b_9: int [1, +INF]
i_10: int [2, +INF]
i_14: int [-INF, n.0_1 + -1]  EQUIVALENCES: { i_4 } (1 elements)


main ()
{
  int n;
  int i;
  int b;
  int a;
  int n.0_1;

  <bb 2> [local count: 118111600]:
  scanf ("%d", &n);
  __printf_chk (1, "%d\n", 0);
  __printf_chk (1, "%d\n", 1);
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 955630223]:
  b_9 = a_2 + b_3;
  __printf_chk (1, "%d\n", b_9);
  i_10 = i_4 + 1;

  <bb 4> [local count: 1073741824]:
  # a_2 = PHI <0(2), b_3(3)>
  # b_3 = PHI <1(2), b_9(3)>
  # i_4 = PHI <1(2), i_10(3)>
  n.0_1 = n;
  if (n.0_1 > i_4)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111601]:
  n ={v} {CLOBBER};
  return 0;

}


