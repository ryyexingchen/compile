
;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23) (executed once)

Created preheader block for loop 1
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 6 4
;;
;; Loop 1
;;  header 3, latch 6
;;  depth 1, outer 0
;;  nodes: 3 6
;; 2 succs { 5 4 }
;; 5 succs { 3 }
;; 3 succs { 6 4 }
;; 6 succs { 3 }
;; 4 succs { 1 }
/usr/include/x86_64-linux-gnu/bits/stdio2.h:107: __printf_chk: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 1, 1 (1, 1, 1, 1)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 2, 2)
  Directive 3 at offset 3: "", length = 1

/usr/include/x86_64-linux-gnu/bits/stdio2.h:107: __printf_chk: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 1, 1 (1, 1, 1, 1)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 2, 2)
  Directive 3 at offset 3: "", length = 1

/usr/include/x86_64-linux-gnu/bits/stdio2.h:107: __printf_chk: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 10, 10, 10 (1, 10, 10, 10)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 11, 11, 11)
  Directive 3 at offset 3: "", length = 1

main ()
{
  int n;
  int i;
  int b;
  int a;
  int n.0_1;
  int n.0_18;

  <bb 2> [local count: 118111600]:
  scanf ("%d", &n);
  __printf_chk (1, "%d\n", 0);
  __printf_chk (1, "%d\n", 1);
  n.0_18 = n;
  if (n.0_18 > 1)
    goto <bb 5>; [89.00%]
  else
    goto <bb 4>; [11.00%]

  <bb 5> [local count: 105119324]:

  <bb 3> [local count: 955630224]:
  # a_19 = PHI <0(5), b_20(6)>
  # b_20 = PHI <1(5), b_9(6)>
  # i_21 = PHI <1(5), i_10(6)>
  b_9 = a_19 + b_20;
  __printf_chk (1, "%d\n", b_9);
  i_10 = i_21 + 1;
  n.0_1 = n;
  if (n.0_1 > i_10)
    goto <bb 6>; [89.00%]
  else
    goto <bb 4>; [11.00%]

  <bb 6> [local count: 850510900]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 118111601]:
  n ={v} {CLOBBER};
  return 0;

}


