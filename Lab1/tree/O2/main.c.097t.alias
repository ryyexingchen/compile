
;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &STRING
ESCAPED = &n
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
b_9 = a_2 + UNKNOWN
b_9 = b_3 + UNKNOWN
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = b_9
i_10 = i_4 + UNKNOWN
i_10 = &NONLOCAL
a_2 = &NULL
a_2 = b_3
b_3 = &NONLOCAL
b_3 = b_9
i_4 = &NONLOCAL
i_4 = i_10
n.0_1 = n
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 9 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"*__isoc99_scanf";
"n";
"__printf_chk";
"b_9";
"a_2"[label="a_2 = { 1 }"];
"b_3"[label="b_3 = { 5 }"];
"i_10"[label="i_10 = { 5 }"];
"i_4"[label="i_4 = { 5 }"];
"n.0_1";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"**__isoc99_scanf";
"*n";
"*__printf_chk";
"*b_9";
"*a_2";
"*b_3";
"*i_10";
"*i_4";
"*n.0_1";

  // Edges in the constraint graph:
"b_9" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"b_3" -> "a_2";
"b_9" -> "b_3";
"i_10" -> "i_4";
"n" -> "n.0_1";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"*__isoc99_scanf";
"__printf_chk";
"b_9";
"a_2" [label="\N\nb_9 = a_2 + UNKNOWN\l"];
"b_3" [label="\N\nb_9 = b_3 + UNKNOWN\l"];
"i_10" [label="\N\ni_10 = i_10 + UNKNOWN\l"];
"n.0_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.0_1";
"STOREDANYTHING" -> "b_9";
"STOREDANYTHING" -> "i_10";
"b_9" -> "ESCAPED";
"b_9" -> "b_3";
"b_3" -> "a_2";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"*__isoc99_scanf";
"__printf_chk";
"b_9";
"a_2" [label="\N\nb_9 = a_2 + UNKNOWN\l"];
"b_3" [label="\N\nb_9 = b_3 + UNKNOWN\l"];
"i_10" [label="\N\ni_10 = i_10 + UNKNOWN\l"];
"n.0_1";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "n.0_1";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.0_1";
"STOREDANYTHING" -> "b_9";
"STOREDANYTHING" -> "i_10";
"b_9" -> "ESCAPED";
"b_9" -> "b_3";
"b_3" -> "a_2";
"n.0_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL n }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
*__isoc99_scanf = { }
n = { ESCAPED NONLOCAL } same as n.0_1
__printf_chk = { }
b_9 = { NULL NONLOCAL }
a_2 = { NULL NONLOCAL }
b_3 = { NULL NONLOCAL }
i_10 = { NONLOCAL }
i_4 = { NONLOCAL } same as i_10
n.0_1 = { ESCAPED NONLOCAL }


Alias information for main

Aliased symbols

n, UID D.2516, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.2516 } (escaped)

Flow-insensitive points-to information


main ()
{
  int n;
  int i;
  int b;
  int a;
  int n.0_1;

  <bb 2> [local count: 118111600]:
  scanf ("%d", &n);
  __printf_chk (1, "%d\n", 0);
  __printf_chk (1, "%d\n", 1);
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 955630223]:
  b_9 = a_2 + b_3;
  __printf_chk (1, "%d\n", b_9);
  i_10 = i_4 + 1;

  <bb 4> [local count: 1073741824]:
  # a_2 = PHI <0(2), b_3(3)>
  # b_3 = PHI <1(2), b_9(3)>
  # i_4 = PHI <1(2), i_10(3)>
  n.0_1 = n;
  if (n.0_1 > i_4)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111601]:
  n ={v} {CLOBBER};
  return 0;

}


